(type (item 'a 'b) {:key 'a :value 'b})
(type (slot 'a 'b) (#empty #tombstone (#item (item 'a 'b))))
(type (t 'a 'b)
  {:data& (array (slot 'a 'b))
   :nitems& int
   :hash (fun 'a int)
   :eq (fun 'a 'a bool)})

(fun create [size hash eq]
  (val data& (__unsafe_array_create size))
  (iter-range 0 size
              (fun [i] (__unsafe_ptr_set &(array-data data) i #empty)))
  {:data :nitems 0 :hash :eq})

(external abs (fun int int))

(fun idx [tbl key]
  (let [hash ((.hash tbl) key)]
    (mod (abs hash) (array-length (.data tbl)))))

(fun probe-linear [tbl key insert?]
  (fun probe [i size]
    (match (array-get (.data tbl) i)
      (#empty i)
      (#tombstone (if insert? i (probe (mod (+ i 1) size) size)))
      ((#item {:key k :value _})
       (do
         (if ((.eq tbl) key k)
           i                    -- Overwrite the same key
           (probe (mod (+ i 1) size) size))))))
  (let [idx (idx tbl key)]
    (probe idx (array-length (.data tbl)))))

(fun iter-data [data f]
  (fun inner [i]
    (if (= i (array-length data))
      ()
      (match (array-get data i)
        ((or #empty #tombstone) (inner (+ i 1)))
        ((#item {:key :value})
         (do
           (f key value)
           (inner (+ i 1)))))))
  (inner 0))

(fun fold [tbl init f]
  (fun inner [i acc&]
    (if (= i (array-length tbl.data))
      acc
      (match (array-get tbl.data i)
        ((or #empty #tombstone) (inner (+ i 1) &acc))
        ((#item {:key :value})
         (do
           (set &acc (f acc key value))
           (inner (+ i 1) &acc))))))
  (val acc& init)
  (inner 0 &acc))

(val load-limit 0.75)

(fun load-factor [tbl]
  (/. (float_of_int (.nitems tbl)) (float_of_int (array-length (.data tbl)))))

(rec
 (fun grow [tbl&]               -- TODO recursive functions
   (val size (* 2 (array-length (.data tbl))))
   (val data& (__unsafe_array_create size))
   (iter-range 0 size
               (fun [i] (__unsafe_ptr_set &(array-data data) i #empty)))
   (val old-data (.data tbl))
   (set &(.data tbl) data)
   (set &(.nitems tbl) 0)
   (iter-data old-data (fun [key value] (insert &tbl key value))))

 (fun insert [tbl& key value]
   (if (>. (load-factor tbl) load-limit)
     (grow &tbl))
   (let [idx (probe-linear tbl key true)]
     (set &(array-get (.data tbl) idx) (#item {:key :value}))
     (set &(.nitems tbl) (+ 1 (.nitems tbl))))))

(fun find [tbl key]
  (let [idx (probe-linear tbl key false)]
    (match (array-get (.data tbl) idx)
      ((#item i) (#some (.value i)))
      ((or #empty #tombstone) #none))))

(fun to-array [tbl]
  (val arr& (__unsafe_array_create tbl.nitems))
  (set &(array-length arr) 0)
  (iter-data tbl.data
             (fun [key value] (array-push &arr {key value})))
  arr)

-- test
(fun string-hash [str]
  -- unsigned long
  -- hash(unsigned char *str)
  -- {
  --     unsigned long hash = 5381;
  --     int c;
  --     while (c = *str++)
  --         hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
  --     return hash;
  -- }
  (array-fold str (fun [hash c] (+ (* hash 33) (u8_to_int c))) 5381))

(external strncmp (fun (raw_ptr u8) (raw_ptr u8) int i32))
(external srand (fun int unit))
(external rand (fun unit i32))

(fun string-cmp [l r]
  (= 0 (int_of_i32 (strncmp (array-data l) (array-data r) (array-length l)))))

-- (val tbl& (create 64 (fun [i] i) (fun [l r] (= l r))))
-- (srand 42)

-- (val num 1000000)
-- (iter-range 0 num
--             (fun [i]
--               (ignore i)
--               (val i (int_of_i32 (rand)))
--               (insert &tbl i i)))

-- (val cnt& 0)
-- (iter-range 0 num
--             (fun [i]
--               (match (find tbl i)
--                 ((#some _) (set &cnt (+ cnt 1)))
--                 (#none ()))))
-- (print (fmt-str cnt))

-- (val tbl& (create 64 string-hash string-cmp))
-- (insert &tbl "key" 1.1)
-- (fun find-print [key]
--   (print (match (find tbl key)
--            ((#some v) (fmt-str v))
--            (#none "none"))))
-- (find-print "key")
-- (find-print "otherkey")
