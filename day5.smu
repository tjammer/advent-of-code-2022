(open util)

(fun find-break [lines i]
  (if (= 0 (.len (array-get lines i)))
    i
    (find-break lines (+ i 1))))

(fun init-stacks [stacks& num-stacks line]
  (fun f [i]
    (val pos (+ 1 (* i 4)))
    (if (not (< pos (.len line)))
      ()
      (match (array-get (.buf line) (+ (.start line) pos))
        (' ' ())
        (n (array-push &(array-get stacks i) n)))))
  (iter-range 0 num-stacks f))

(fun move [stacks& move from to]
  (fun f [i]
    (ignore i)
    (val item (array-get (array-get stacks from)
                         (- (array-length (array-get stacks from)) 1)))
    (array-push &(array-get stacks to) item)
    (array-drop-back &(array-get stacks from)))
  (iter-range 0 move f))

(fun move2 [stacks& move from to]
  (fun f [i]
    (let [index (+ (array-length (array-get stacks from)) i)
          item (array-get (array-get stacks from) index)]
     (array-push &(array-get stacks to) item)))
  (iter-range (- 0 move) 0 f)
  (iter-range 0 move (fun [i] (ignore i) (array-drop-back &(array-get stacks from)))))

(fun instructions [stacks& line move]
  (let [items (view-split-on-char line ' ')
        mv (int-of-view (array-get items 1))
        from (int-of-view (array-get items 3))
        to (int-of-view (array-get items 5))]
   (move &stacks mv (- from 1) (- to 1))))

(fun print-stacks [stacks]
  (fun build-str [str stack]
                 (val item (array-get stack (- (array-length stack) 1)))
                 (fmt-str str item))
  (print (array-fold stacks build-str "")))

(fun work [lines break num-stacks move]
  (val stacks& [])
  (iter-range 0 num-stacks (fun [i] (ignore i) (array-push &stacks [])))
  (iter-range 0 (- break 1) (fun [i] (init-stacks &stacks num-stacks
                                                  (array-get lines (- (- break 2) i)))))
  (iter-range (+ break 1) (array-length lines)
              (fun [i] (instructions &stacks (array-get lines i) move)))
  (print-stacks stacks))

(fun solve [f]
  (val lines io/(split-newlines (io/read-file f)))
  (val break (find-break lines 0))
  (val num-stacks (/ (.len (array-get lines (- break 1))) 3))
  (work lines break num-stacks move)
  (work lines break num-stacks move2))

(io/with-open "input" solve)
