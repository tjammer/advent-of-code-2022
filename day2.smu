(open util)

(type hand (#rock #paper #scissors))
(type outcome (#win #lose #draw))

(fun convert-a [i]
  (match i
    ((or 'A' 'X') #rock)
    ((or 'B' 'Y') #paper)
    ((or 'C' 'Z') #scissors)
    (num (do (print (fmt-str "something went wrong: " num)) #scissors))))

(fun convert-b [i]
  (match i
    ('X' #lose)
    ('Y' #draw)
    ('Z' #win)
    (num (do (print (fmt-str "something went wrong: " num)) #win))))

(fun score [item]
  (val win
    (match item
    ((or { #rock #paper } { #scissors #rock } { #paper #scissors }) 6)
    ((or { #scissors #paper } { #paper #rock } { #rock #scissors }) 0)
    (_ 3)))
  (val pick
    (match item
      ({ _ #rock } 1)
      ({ _ #paper } 2)
      ({ _ #scissors } 3)))
  (+ win pick))

(fun eval-b [item]
  (val pick
    (match item
      ((or { #rock #win } { #scissors #lose }) #paper)
      ((or { #paper #win } { #rock #lose }) #scissors)
      ((or { #scissors #win } { #paper #lose }) #rock)
      ({ i #draw } i)))
  (score {(.0 item) pick}))

(fun parse [f]
  (val lines (split-newlines (io/read-file f)))

  (fun collect-a [line]
    (let [opponent io/(array-get (.buf line) (.start line))
          mine io/(array-get (.buf line) (+ (.start line) 2))]
      {(convert-a opponent) (convert-a mine)}))

  (fun collect-b [line]
    (let [opponent io/(array-get (.buf line) (.start line))
          mine io/(array-get (.buf line) (+ (.start line) 2))]
      {(convert-a opponent) (convert-b mine)}))

  (-> (array-map lines collect-a)
      (array-fold (fun [sum item] (+ sum (score item))) 0)
      fmt-str
      print)
  (-> (array-map lines collect-b)
      (array-fold (fun [sum item] (+ sum (eval-b item))) 0)
      fmt-str
      print))

(io/with-open "inp.txt" parse)
