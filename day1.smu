-- (external stdout file)
-- (external fputs (fun u8& file unit))
-- (external strtol (fun (raw_ptr u8) (raw_ptr u8) i32 int))

(open io)
(open util)

(fun take [heap& num]
  (val out& [])
  (fun f [i] (ignore i)
    (->> (match (heap/pop &heap)
           ((#some thing) thing)
           (#none 0))
         (array-push &out)))
  (iter-range 0 num f)
  out)

(fun day1 [f]
  (val heap& heap/{:items [] :cmp (fun [i j] (- i j))})

  (fun insert-into-heap [cals entry]
    (if (= (.len entry) 0)
      (do (heap/insert &heap cals) 0)
      (let [cal (int-of-view entry)]
        (+ cal cals))))
  (ignore
   (array-fold (split-newlines (read-file f)) insert-into-heap 0))

  -- part 1
  (-> (match (heap/pop &heap)
        ((#some cals) (fmt-str cals))
        (#none "none"))
      print)
  -- part 2
  (-> (array-fold (take &heap 3) (fun [sum i] (+ sum i)) 0)
      fmt-str
      print))

(with-open "input" day1)
