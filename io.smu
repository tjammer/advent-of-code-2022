(type file (raw_ptr u8))
(external fread (fun u8& int int file int))
(external fopen (fun (raw_ptr u8) (raw_ptr u8) file))
(external fclose (fun file unit))
(external ferror (fun file i32))

(fun read-file [file]
  (fun str-cpy [src dst& size]
  (iter-range 0 size
              (fun [i] (set &(array-get dst i) (array-get src i)))))

  (val chunk-size 2097152)
  (val buf& (__unsafe_array_create chunk-size))

  (fun read [used bufsize]
    (if (> (+ used chunk-size) bufsize)
      (let [newsize (* 2 bufsize)
            newbuf& (__unsafe_array_create newsize)] --realloc
        (str-cpy buf &newbuf (array-length buf))
        (set &buf newbuf)
        (read used newsize))
      (let [n (fread &(array-get buf used) 1 chunk-size file)]
        (if (< n chunk-size)
          (+ used n)
          (read (+ used n) bufsize)))))
  (val fsize (read 0 chunk-size))
  (if (not (= 0 (int_of_i32 (ferror file))))
    (do
      (print "Could not read file")
      [])
    (do
      (set &(array-length buf) fsize)
      (array-set &buf fsize 0u8)
      buf)))

(fun with-open [filename f]
  (let [file (fopen (array-data filename) (array-data "r"))
        ret (f file)]
    (fclose file)
    ret))
